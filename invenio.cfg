"""
InvenioRDM settings for openeduarchive project.

This file was automatically generated by 'invenio-cli init'.

For the full list of settings and their values, see
https://inveniordm.docs.cern.ch/reference/configuration/.
"""

from datetime import datetime
from invenio_i18n import lazy_gettext as _


def _(x):  # needed to avoid start time failure with lazy strings
    return x

# Flask
# =====
# See https://flask.palletsprojects.com/en/1.1.x/config/

# Define the value of the cache control header `max-age` returned by the server when serving
# public files. Files will be cached by the browser for the provided number of seconds.
# See flask documentation for more information:
# https://flask.palletsprojects.com/en/2.1.x/config/#SEND_FILE_MAX_AGE_DEFAULT
SEND_FILE_MAX_AGE_DEFAULT = 300

# SECURITY WARNING: keep the secret key used in production secret!
# Do not commit it to a source code repository.
# 

# Since HAProxy and Nginx route all requests no matter the host header
# provided, the allowed hosts variable is set to localhost. In production it
# should be set to the correct host and it is strongly recommended to only
# route correct hosts to the application.
APP_ALLOWED_HOSTS = ['0.0.0.0', 'localhost', '127.0.0.1']

# Flask-SQLAlchemy
# ================
# See https://flask-sqlalchemy.palletsprojects.com/en/2.x/config/

# Just for local development, in production this is read from the .env file
SQLALCHEMY_DATABASE_URI="postgresql+psycopg2://openeduarchive:openeduarchive@localhost/openeduarchive"


# Invenio-App
# ===========
# See https://invenio-app.readthedocs.io/en/latest/configuration.html

APP_DEFAULT_SECURE_HEADERS = {
    'content_security_policy': {
        'default-src': [
            "'self'",
            'data:', # for fonts
            "'unsafe-inline'",  # for inline scripts and styles
            "blob:",            # for pdf preview
            # Add your own policies here (e.g. analytics)
        ],
    },
    'content_security_policy_report_only': False,
    'content_security_policy_report_uri': None,
    'force_file_save': False,
    'force_https': True,
    'force_https_permanent': False,
    'frame_options': 'sameorigin',
    'frame_options_allow_from': None,
    'session_cookie_http_only': True,
    'session_cookie_secure': True,
    'strict_transport_security': True,
    'strict_transport_security_include_subdomains': True,
    'strict_transport_security_max_age': 31556926,  # One year in seconds
    'strict_transport_security_preload': False,
}


# Flask-Babel
# ===========
# See https://python-babel.github.io/flask-babel/#configuration

# Default locale (language)
BABEL_DEFAULT_LOCALE = 'it'
# Default time zone
BABEL_DEFAULT_TIMEZONE = 'Europe/Zurich'


# Invenio-I18N
# ============
# See https://invenio-i18n.readthedocs.io/en/latest/configuration.html

# Other supported languages (do not include BABEL_DEFAULT_LOCALE in list).
I18N_LANGUAGES = [
    ('en', _('English')),
    # ('tr', _('Turkish')),
]


# Invenio-Theme
# =============
# See https://invenio-theme.readthedocs.io/en/latest/configuration.html

# Frontpage title
THEME_FRONTPAGE_TITLE = "Open Education Archive"
# Header logo
THEME_LOGO = 'images/oea_logo.svg'


# Invenio-App-RDM
# ===============
# See https://invenio-app-rdm.readthedocs.io/en/latest/configuration.html

# Remove frontpage
THEME_SHOW_FRONTPAGE_INTRO_SECTION = False

# Instance's theme entrypoint file. Path relative to the ``assets/`` folder.
INSTANCE_THEME_FILE = './less/theme.less'


# Invenio-Records-Resources
# =========================
# See https://github.com/inveniosoftware/invenio-records-resources/blob/master/invenio_records_resources/config.py

# TODO: Set with your own hostname when deploying to production
SITE_UI_URL = "https://127.0.0.1"

SITE_API_URL = "https://127.0.0.1/api"

APP_RDM_DEPOSIT_FORM_DEFAULTS = {
    "publication_date": lambda: datetime.now().strftime("%Y-%m-%d"),
    "rights": [
        {
            "id": "cc-by-4.0",
            "title": "Creative Commons Attribution 4.0 International",
            "description": ("The Creative Commons Attribution license allows "
                            "re-distribution and re-use of a licensed work "
                            "on the condition that the creator is "
                            "appropriately credited."),
            "link": "https://creativecommons.org/licenses/by/4.0/legalcode",
        }
    ],
    "publisher": "openeduarchive",
}

# See https://github.com/inveniosoftware/invenio-app-rdm/blob/master/invenio_app_rdm/config.py
APP_RDM_DEPOSIT_FORM_AUTOCOMPLETE_NAMES = 'search' # "search_only" or "off"

# Invenio-RDM-Records
# ===================
# See https://inveniordm.docs.cern.ch/customize/dois/
DATACITE_ENABLED = False
DATACITE_USERNAME = ""
DATACITE_PASSWORD = ""
DATACITE_PREFIX = ""
DATACITE_TEST_MODE = True
DATACITE_DATACENTER_SYMBOL = ""

# Authentication - Invenio-Accounts and Invenio-OAuthclient
# =========================================================
# See: https://inveniordm.docs.cern.ch/customize/authentication/

# Invenio-Accounts
# ----------------
# See https://github.com/inveniosoftware/invenio-accounts/blob/master/invenio_accounts/config.py
ACCOUNTS_LOCAL_LOGIN_ENABLED = True  # enable local login
SECURITY_REGISTERABLE = True  # local login: allow users to register
SECURITY_RECOVERABLE = True  # local login: allow users to reset the password
SECURITY_CHANGEABLE = True  # local login: allow users to change psw
SECURITY_CONFIRMABLE = True  # local login: users can confirm e-mail address
SECURITY_LOGIN_WITHOUT_CONFIRMATION = False # require users to confirm email before being able to login

# Invenio-OAuthclient
# -------------------
# See https://github.com/inveniosoftware/invenio-oauthclient/blob/master/invenio_oauthclient/config.py

OAUTHCLIENT_REMOTE_APPS = {}  # configure external login providers

from invenio_oauthclient.views.client import auto_redirect_login
ACCOUNTS_LOGIN_VIEW_FUNCTION = auto_redirect_login  # autoredirect to external login if enabled
OAUTHCLIENT_AUTO_REDIRECT_TO_EXTERNAL_LOGIN = False  # autoredirect to external login

# Invenio-UserProfiles
# --------------------
USERPROFILES_READ_ONLY = False  # allow users to change profile info (name, email, etc...)

# OAI-PMH
# =======
# See https://github.com/inveniosoftware/invenio-oaiserver/blob/master/invenio_oaiserver/config.py

OAISERVER_ID_PREFIX = "openeduarchive.polito.it"
"""The prefix that will be applied to the generated OAI-PMH ids."""

# Invenio-Search
# --------------

SEARCH_INDEX_PREFIX = "openeduarchive-"


# Open Education Archive Version
OEA_VERSION = '0.6.8'


# Custom Metadata Mapping
# =======================
# See https://inveniordm.docs.cern.ch/customize/metadata/

RDM_NAMESPACES = {
    # CodeMeta
    "code" : "https://codemeta.github.io/terms/",
    # OpenEduArchive
    "oea" : "https://openeduarchive.polito.it/terms/",
}


# Inside the `oea` namespace, we define two custom fields:
# - `oea:educationLevel`
# - `oea:discipline`
# To do so, we need to:
# 1. Define the custom fields
# 2. Declare the custom vocabularies in the vocabularies.yaml file
# 3. Add the custom vocabulary in vocabularies/custom_name.yaml
# 4. Configure the UI for the custom fields
# 5. Configure facets for the custom fields
# Vocabularies are fixtures so we need run `invenio-cli services setup -N -f` to load them into the database
# But this destroys everything! Be careful, never run it in prod!

from invenio_records_resources.services.custom_fields import TextCF
from invenio_vocabularies.services.custom_fields import VocabularyCF

RDM_CUSTOM_FIELDS = [
    VocabularyCF(
        name="oea:educationLevel",
        vocabulary_id="oeaEducationLevel",  # vocabularies/oea_education_level.yaml
        dump_options=True,
        multiple=False,
        field_args={
            "required": True,
            "error_messages": {
                "required": _("Per favore, seleziona un ordine di scuola")
            }
        }
    ),
    VocabularyCF(
        name="oea:discipline",
        vocabulary_id="oeaDiscipline",  # vocabularies/oea_discipline.yaml
        dump_options=True,
        multiple=False,
        field_args={
            "required": True,
            "error_messages": {
                "required": _("Per favore, seleziona una disciplina")
            }
        }
    ),
]

# Configuring UI for the above configured fields `oei:discipline` and `oei:educationLevel`
RDM_CUSTOM_FIELDS_UI = [
    {
        "section": _("Open Education Archive"),
        "fields": [
            dict(
                field="oea:educationLevel",
                ui_widget="Dropdown",
                props=dict(
                    label=_("Ordine di Scuola"),
                    placeholder=_("Seleziona una voce"),
                    icon="building",
                    description=_("Seleziona un ordine di scuola dalla lista"),
                    search=True,
                    multiple=False,
                    clearable=True,
                    required=True,
                )
            ),
            dict(
                field="oea:discipline",
                ui_widget="Dropdown",
                props=dict(
                    label=_("Disciplina"),
                    placeholder=_("Seleziona una disciplina"),
                    icon="book",
                    description=_("Seleziona una disciplina dalla lista"),
                    search=True,
                    multiple=False,
                    clearable=True,
                    required=True,
                )
            ),
        ]
    }
]


### Configuring facets for the custom fields
from invenio_rdm_records.config import RDM_FACETS, RDM_SEARCH
from invenio_records_resources.services.records.facets import CFTermsFacet
from invenio_vocabularies.services.facets import VocabularyLabels

RDM_FACETS = {
    **RDM_FACETS,
    "educationLevelFacet": {
        "facet": CFTermsFacet(
            field="oea:educationLevel.id",  # id is the keyword field of a vocabulary
            label=_("Ordine di Scuola"),
            value_labels=VocabularyLabels("oeaEducationLevel")
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field('oea:educationLevel.id'),
        },
    },
    "disciplineFacet": {
        "facet": CFTermsFacet(
            field="oea:discipline.id",  # id is the keyword field of a vocabulary
            label=_("Disciplina"),
            value_labels=VocabularyLabels("oeaDiscipline")
        ),
        "ui": {  # ui display
            "field": CFTermsFacet.field("oea:discipline.id"),
        },
    },
}

RDM_SEARCH = {
    **RDM_SEARCH,
    "facets": ["educationLevelFacet"] + ["disciplineFacet"] + RDM_SEARCH["facets"],
}

# OEA Permission Policies
# =======================

from openeduarchive.permissions import OEARecordPermissionPolicy, OEACommunitiesPermissionPolicy

# Invenio-Communities
# ===================
# Communities permission policy
# We are setting 2 policies:
# - Community managers + admins + system
#  - Can create, update and delete communities
# - Records
#  - Can be created just in a community context.


COMMUNITIES_PERMISSION_POLICY = OEACommunitiesPermissionPolicy

# Invenio-Records
# ================
CONFIG_OEA_COMMUNITY_MANAGER_ROLE = "oea-community-manager"
RDM_PERMISSION_POLICY = OEARecordPermissionPolicy

# Show community administration in Admin panel
COMMUNITIES_ADMINISTRATION_DISABLED = False